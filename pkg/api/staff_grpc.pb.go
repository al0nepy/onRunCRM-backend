// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: staff.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StaffService_GetAllStaff_FullMethodName = "/api.StaffService/GetAllStaff"
	StaffService_GetOneStaff_FullMethodName = "/api.StaffService/GetOneStaff"
	StaffService_CreateStaff_FullMethodName = "/api.StaffService/CreateStaff"
	StaffService_UpdateStaff_FullMethodName = "/api.StaffService/UpdateStaff"
	StaffService_DeleteStaff_FullMethodName = "/api.StaffService/DeleteStaff"
)

// StaffServiceClient is the client API for StaffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaffServiceClient interface {
	GetAllStaff(ctx context.Context, in *IdTenantRequest, opts ...grpc.CallOption) (StaffService_GetAllStaffClient, error)
	GetOneStaff(ctx context.Context, in *IdsStaffRequest, opts ...grpc.CallOption) (*Staff, error)
	CreateStaff(ctx context.Context, in *CUStaffRequest, opts ...grpc.CallOption) (*Status, error)
	UpdateStaff(ctx context.Context, in *CUStaffRequest, opts ...grpc.CallOption) (*Status, error)
	DeleteStaff(ctx context.Context, in *IdsStaffRequest, opts ...grpc.CallOption) (*Status, error)
}

type staffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStaffServiceClient(cc grpc.ClientConnInterface) StaffServiceClient {
	return &staffServiceClient{cc}
}

func (c *staffServiceClient) GetAllStaff(ctx context.Context, in *IdTenantRequest, opts ...grpc.CallOption) (StaffService_GetAllStaffClient, error) {
	stream, err := c.cc.NewStream(ctx, &StaffService_ServiceDesc.Streams[0], StaffService_GetAllStaff_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &staffServiceGetAllStaffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StaffService_GetAllStaffClient interface {
	Recv() (*Staff, error)
	grpc.ClientStream
}

type staffServiceGetAllStaffClient struct {
	grpc.ClientStream
}

func (x *staffServiceGetAllStaffClient) Recv() (*Staff, error) {
	m := new(Staff)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *staffServiceClient) GetOneStaff(ctx context.Context, in *IdsStaffRequest, opts ...grpc.CallOption) (*Staff, error) {
	out := new(Staff)
	err := c.cc.Invoke(ctx, StaffService_GetOneStaff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) CreateStaff(ctx context.Context, in *CUStaffRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, StaffService_CreateStaff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) UpdateStaff(ctx context.Context, in *CUStaffRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, StaffService_UpdateStaff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) DeleteStaff(ctx context.Context, in *IdsStaffRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, StaffService_DeleteStaff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaffServiceServer is the server API for StaffService service.
// All implementations must embed UnimplementedStaffServiceServer
// for forward compatibility
type StaffServiceServer interface {
	GetAllStaff(*IdTenantRequest, StaffService_GetAllStaffServer) error
	GetOneStaff(context.Context, *IdsStaffRequest) (*Staff, error)
	CreateStaff(context.Context, *CUStaffRequest) (*Status, error)
	UpdateStaff(context.Context, *CUStaffRequest) (*Status, error)
	DeleteStaff(context.Context, *IdsStaffRequest) (*Status, error)
	mustEmbedUnimplementedStaffServiceServer()
}

// UnimplementedStaffServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStaffServiceServer struct {
}

func (UnimplementedStaffServiceServer) GetAllStaff(*IdTenantRequest, StaffService_GetAllStaffServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllStaff not implemented")
}
func (UnimplementedStaffServiceServer) GetOneStaff(context.Context, *IdsStaffRequest) (*Staff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneStaff not implemented")
}
func (UnimplementedStaffServiceServer) CreateStaff(context.Context, *CUStaffRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaff not implemented")
}
func (UnimplementedStaffServiceServer) UpdateStaff(context.Context, *CUStaffRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaff not implemented")
}
func (UnimplementedStaffServiceServer) DeleteStaff(context.Context, *IdsStaffRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStaff not implemented")
}
func (UnimplementedStaffServiceServer) mustEmbedUnimplementedStaffServiceServer() {}

// UnsafeStaffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaffServiceServer will
// result in compilation errors.
type UnsafeStaffServiceServer interface {
	mustEmbedUnimplementedStaffServiceServer()
}

func RegisterStaffServiceServer(s grpc.ServiceRegistrar, srv StaffServiceServer) {
	s.RegisterService(&StaffService_ServiceDesc, srv)
}

func _StaffService_GetAllStaff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IdTenantRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StaffServiceServer).GetAllStaff(m, &staffServiceGetAllStaffServer{stream})
}

type StaffService_GetAllStaffServer interface {
	Send(*Staff) error
	grpc.ServerStream
}

type staffServiceGetAllStaffServer struct {
	grpc.ServerStream
}

func (x *staffServiceGetAllStaffServer) Send(m *Staff) error {
	return x.ServerStream.SendMsg(m)
}

func _StaffService_GetOneStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).GetOneStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_GetOneStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).GetOneStaff(ctx, req.(*IdsStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_CreateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CUStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).CreateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_CreateStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).CreateStaff(ctx, req.(*CUStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_UpdateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CUStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).UpdateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_UpdateStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).UpdateStaff(ctx, req.(*CUStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_DeleteStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).DeleteStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_DeleteStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).DeleteStaff(ctx, req.(*IdsStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StaffService_ServiceDesc is the grpc.ServiceDesc for StaffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StaffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.StaffService",
	HandlerType: (*StaffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOneStaff",
			Handler:    _StaffService_GetOneStaff_Handler,
		},
		{
			MethodName: "CreateStaff",
			Handler:    _StaffService_CreateStaff_Handler,
		},
		{
			MethodName: "UpdateStaff",
			Handler:    _StaffService_UpdateStaff_Handler,
		},
		{
			MethodName: "DeleteStaff",
			Handler:    _StaffService_DeleteStaff_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllStaff",
			Handler:       _StaffService_GetAllStaff_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "staff.proto",
}
