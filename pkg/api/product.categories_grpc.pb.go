// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: product.categories.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductCategories_GetAllCategories_FullMethodName = "/api.ProductCategories/GetAllCategories"
	ProductCategories_CreateCategories_FullMethodName = "/api.ProductCategories/CreateCategories"
	ProductCategories_DeleteCategories_FullMethodName = "/api.ProductCategories/DeleteCategories"
)

// ProductCategoriesClient is the client API for ProductCategories service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCategoriesClient interface {
	GetAllCategories(ctx context.Context, in *AllCategoriesRequest, opts ...grpc.CallOption) (*AllCategories, error)
	CreateCategories(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*Status, error)
	DeleteCategories(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*Status, error)
}

type productCategoriesClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCategoriesClient(cc grpc.ClientConnInterface) ProductCategoriesClient {
	return &productCategoriesClient{cc}
}

func (c *productCategoriesClient) GetAllCategories(ctx context.Context, in *AllCategoriesRequest, opts ...grpc.CallOption) (*AllCategories, error) {
	out := new(AllCategories)
	err := c.cc.Invoke(ctx, ProductCategories_GetAllCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoriesClient) CreateCategories(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, ProductCategories_CreateCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoriesClient) DeleteCategories(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, ProductCategories_DeleteCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCategoriesServer is the server API for ProductCategories service.
// All implementations must embed UnimplementedProductCategoriesServer
// for forward compatibility
type ProductCategoriesServer interface {
	GetAllCategories(context.Context, *AllCategoriesRequest) (*AllCategories, error)
	CreateCategories(context.Context, *CreateCategoryRequest) (*Status, error)
	DeleteCategories(context.Context, *DeleteCategoryRequest) (*Status, error)
	mustEmbedUnimplementedProductCategoriesServer()
}

// UnimplementedProductCategoriesServer must be embedded to have forward compatible implementations.
type UnimplementedProductCategoriesServer struct {
}

func (UnimplementedProductCategoriesServer) GetAllCategories(context.Context, *AllCategoriesRequest) (*AllCategories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategories not implemented")
}
func (UnimplementedProductCategoriesServer) CreateCategories(context.Context, *CreateCategoryRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategories not implemented")
}
func (UnimplementedProductCategoriesServer) DeleteCategories(context.Context, *DeleteCategoryRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategories not implemented")
}
func (UnimplementedProductCategoriesServer) mustEmbedUnimplementedProductCategoriesServer() {}

// UnsafeProductCategoriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCategoriesServer will
// result in compilation errors.
type UnsafeProductCategoriesServer interface {
	mustEmbedUnimplementedProductCategoriesServer()
}

func RegisterProductCategoriesServer(s grpc.ServiceRegistrar, srv ProductCategoriesServer) {
	s.RegisterService(&ProductCategories_ServiceDesc, srv)
}

func _ProductCategories_GetAllCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoriesServer).GetAllCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategories_GetAllCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoriesServer).GetAllCategories(ctx, req.(*AllCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategories_CreateCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoriesServer).CreateCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategories_CreateCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoriesServer).CreateCategories(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategories_DeleteCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoriesServer).DeleteCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategories_DeleteCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoriesServer).DeleteCategories(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCategories_ServiceDesc is the grpc.ServiceDesc for ProductCategories service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCategories_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ProductCategories",
	HandlerType: (*ProductCategoriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCategories",
			Handler:    _ProductCategories_GetAllCategories_Handler,
		},
		{
			MethodName: "CreateCategories",
			Handler:    _ProductCategories_CreateCategories_Handler,
		},
		{
			MethodName: "DeleteCategories",
			Handler:    _ProductCategories_DeleteCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.categories.proto",
}
